generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
  categories    Category[]
  transactions  Transaction[]
  monthHistory  MonthHistory[]
  yearHistory   YearHistory[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@map("password_reset_token")
}

model UserSettings {
  userId   String @id
  currency String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Category {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  createdAt DateTime @default(now())
  name      String
  icon      String
  type      String   @default("income")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId, type])
  @@map("categories")
}

model Transaction {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  amount       Float
  description  String
  date         DateTime
  userId       String
  type         String   @default("income")
  category     String
  categoryIcon String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transaction")
}

model MonthHistory {
  userId  String @map("user_id")
  day     Int
  month   Int
  year    Int
  income  Float
  expense Float
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([day, month, year, userId])
  @@map("month_history")
}

model YearHistory {
  userId  String @map("user_id")
  month   Int
  year    Int
  income  Float
  expense Float
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([month, year, userId])
  @@map("year_history")
}
